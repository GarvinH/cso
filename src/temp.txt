/**
 * This template can be used as reference or a starting point for the Shape Game
 * for your final summative project
 * @author Mangat
 **/

//Graphics &GUI imports
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Toolkit;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Rectangle;

//Keyboard imports
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;


//Util
import java.util.Random;
import java.util.ArrayList;


class ShapeGameTemplate extends JFrame {

    //class variables
    static JFrame window;
    JPanel gamePanel;
    Player player;
    ArrayList<Enemy> enemyList;
    Random rand;

    //Main
    public static void main(String[] args) {
        window = new ShapeGameTemplate();
    }


    //Constructor - this runs first
    ShapeGameTemplate() {
        super("My Game");
        rand = new Random();
        int x,y,size,enemyCount;
        //create enemies and player
        player = new Player(0, 0, 100, new Rectangle(0, 0, 100, 100));
        enemyList = new ArrayList<>();
        //spawn 5 enemies
        enemyCount = rand.nextInt(10)+5;
        for(int i = 0; i < enemyCount; i++){
            x = rand.nextInt(1000) + 100;
            y = rand.nextInt(600) + 100;
            size = rand.nextInt(100)+ 50;
            enemyList.add(new Enemy(x,y, size, new Rectangle(x,y,size,size)));
        }

        // Set the frame to full screen
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setSize(Toolkit.getDefaultToolkit().getScreenSize());
        // this.setUndecorated(true);  //Set to true to remove title bar
        //frame.setResizable(false);



        //Set up the game panel (where we put our graphics)
        gamePanel = new GameAreaPanel();
        this.add(new GameAreaPanel());

        MyKeyListener keyListener = new MyKeyListener();
        this.addKeyListener(keyListener);

        this.requestFocusInWindow(); //make sure the frame has focus

        this.setVisible(true);



    } //End of Constructor



    /** --------- INNER CLASSES ------------- **/

    // Inner class for the the game area - This is where all the drawing of the screen occurs
    private class GameAreaPanel extends JPanel {
        public void paintComponent(Graphics g) {
            super.paintComponent(g); //required
            setDoubleBuffered(true);

            //move enemies
            for(Enemy enemy : enemyList){
                int move = rand.nextInt(4)+1;
                if (move == 1){
                    enemy.moveDown();
                } else if (move == 2){
                    enemy.moveRight();
                } else if (move == 3){
                    enemy.moveLeft();
                } else {
                    enemy.moveUp();
                }
            }

            //check for collision

            for(int i = 0; i < enemyList.size(); i++){
                if (player.isCollision(enemyList.get(i).getBoundingBox())){
                    player.grow(enemyList.get(i).getArea());
                    enemyList.remove(enemyList.get(i));
                }
            }

            //draw all squares

            for(Enemy enemy : enemyList){
                enemy.draw(g);
            }

            //draw player circle
            player.draw(g);

            // reset boundingBoxes
            player.setBoundingBox(new Rectangle((int)player.getX(), (int)player.getY(), (int)player.getRadius(),
                    (int)player.getRadius()));

            for (Enemy enemy: enemyList){
                enemy.setBoundingBox(new Rectangle((int)enemy.getX(), (int)enemy.getY(), (int)enemy.getSideLength(),
                        (int)enemy.getSideLength()));
            }
            //repaint
            repaint();
        }
    }

    // -----------  Inner class for the keyboard listener - this detects key presses and runs the corresponding code
    private class MyKeyListener implements KeyListener {

        public void keyTyped(KeyEvent e) {
        }

        public void keyPressed(KeyEvent e) {
            //System.out.println("keyPressed="+KeyEvent.getKeyText(e.getKeyCode()));

            if (KeyEvent.getKeyText(e.getKeyCode()).equals("A")) {  //If 'A' is pressed
                player.moveLeft();
            } else if(KeyEvent.getKeyText(e.getKeyCode()).equals("D")) {
                player.moveRight();
            } else if (KeyEvent.getKeyText(e.getKeyCode()).equals("S")) {
                player.moveDown();
            } else if (KeyEvent.getKeyText(e.getKeyCode()).equals("W")) {
                player.moveUp();
            } else if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {  //If ESC is pressed
                System.out.println("Quitting!"); //close frame & quit
                window.dispose();
            }
        }

        public void keyReleased(KeyEvent e) {
        }
    } //end of keyboard listener



}